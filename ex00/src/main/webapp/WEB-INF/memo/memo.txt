@RequiredArgscontructor
> @NonNull, final 변수에 대해 생성자를 만들어줌


기본적인 DB연결 테스트
jdbc드라이버만으로 구현한 테스트

pom.xml

	<dependency>
		<groupId>com.oracle.database.jdbc</groupId>
		<artifactId>ojdbc8</artifactId>
		<version>21.1.0.0</version>
	</dependency>
	
	
JDBCTests 클래스(junit 테스트 클래스)
	

import static org.junit.Assert.fail;

import java.sql.Connection;
import java.sql.DriverManager;

import org.junit.Test;

import lombok.extern.log4j.Log4j;

@Log4j
public class JDBCTests {

	static {
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void testConnection() {
		try(Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE",
				"spring",
				"oracle")){
			log.info(conn);
		}catch(Exception e) {
			fail(e.getMessage());
		}
	}
	
}

console 로그
INFO : org.zerock.persistence.JDBCTests - oracle.jdbc.driver.T4CConnection@2b72cb8a

end 기본적인 DB연결 테스트





커넥션 풀 설정

커넥션 풀 : 매번 데이터베이스와 연결하는 방식이 아닌 미리 커넥션을 만들어놓고 연결을 맺은 후 반환하는 구조를 통해 성능 향상을 꾀함

HikariCP 설정


pom.xml

<!-- 데이터베이스 커넥션풀을 이용하기 위한 -->
		<dependency>
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP</artifactId>
			<version>2.7.4</version>
		</dependency>
		
root-context.xml
(root-context.xml은 스프링이 로딩되면서 읽어들이는 문서 주로 이미 만들어진 클래스들을 이용해서 스프링의 Bean으로 등록할 때 사용

	<!-- DB접속 빈 등록 -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="oracle.jdbc.OracleDriver"/> //오라클 버전에 따라 다름
	    <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/> //오라클 버전에 따라 다름 
		<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:XE"/>
		<property name="username" value="spring"/>
		<property name="password" value="oracle"/>
	</bean>
	
	<!-- Hikari configuration -->
	
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig"/>
	</bean>
	
		
		
태스트 클래스

package org.zerock.persistence;

import static org.junit.Assert.fail;

import java.sql.Connection;

import javax.sql.DataSource;

import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import lombok.Setter;
import lombok.extern.log4j.Log4j;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
@Log4j
public class DataSourceTests {

	@Setter(onMethod_ = {@Autowired})
	private DataSource dataSource;
	

	@Test
	public void testConnextion() {
		try (Connection conn = dataSource.getConnection()){

			log.info(conn);
			
		}catch(Exception e) {
			fail(e.getMessage());
		}
	}
}


end 커넥션 풀 설정





Mybatis 연동
-자동으로 Connection clas() 가능
 - 내부적으로 preparedStatement 처리
 #{prop}와 같이 속성을 지정하면 내부적으로 자동 처리
 리턴 타입을 지정하는 경우 자동으로 객체 생성 및 ResultSet 처리
 
 Mybatis 라이브러리 추가
 
 pom.xml
 
 <!-- https//mvnrepository.com/artifact/org.mybatis/mybatis -->
		<!-- mybatis 사용을 위한 설정 -->

		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.5.2</version>
		</dependency>


		<!-- https//mvnrepository.com/artifact/org.mybatis/mybatis-spring -->

		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.2</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		
SQLSessionFactory
 - 내부적으로 SQLSession을 만들어내는 존재
 - 개발에서는 SQLSession을 통해 Connection을 생성하거나 SQL을 전달하고 리턴받는 구조로 작성하게 됨
 
 root-context.xml 
 
 
 <!-- Hikari configuration -->
	
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig"/>
	</bean>
	
	
	<!-- Mybatis 사용을 위한 SQLSessionFactory 연동 -->
	<!-- SQLSession 을 만들어내는 존재... -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
	</bean>
 
		
스프링과의 연동 처리

 - SQL을 어떻게 처리할 것인지 별도의 설정으로 분리해주고 자동으로 처리하는 방식이 좋음
 - 그러시 위해선 Mybatis 의 Mapper라는 존재를 작성해줘야 합니다.
 - Mybatis-Spring을 이용하는 경우 Mapper 를 XML과 인터페이스, Annotation 형태로 작성할 수 있다.

1. Mapper 인터페이스 생성


...

public interface TimeMapper {

	@select("select sysdate from dual")
	public String getTime();
	
}



2. Mapper 설정

 - Mubatis가 동작할때 Mapper를 인식할 수 있도록 root-context.sml에 설정 필요
 
 root-context.xml파일을 열고 Namespaces 항목에서 mybatis-spring탭 선택
 
 root-context.xml
 
 
 	<!-- Mybatis가 동작할때 Mapper를 인식할 수 있도록 설정 -->
	<mybatis-spring:scan base-package="org.zerock.mapper"/>
	

<mybatis-spring:scan> 태그의 base-package 속성은 지정된 패키지 내 모든 Mybatis 관련
어노테이션을 찾아서 처리


3. Mapper 테스트

 예제 클래스 생성 (TimeMapperTests 클래스, 테스트를 위한 클래스임)
 
 
 package org.zerock.persistence;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.zerock.mapper.TimeMapper;

import lombok.Setter;
import lombok.extern.log4j.Log4j;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
@Log4j
public class TimeMapperTests {

	@Setter(onMethod_ = @Autowired)
	private TimeMapper timeMapper;
	
	@Test
	public void testGetTime() {
		log.info(timeMapper.getClass().getName());
		log.info(timeMapper.getTime());
	}
	
	
}
 
 

4. xml 매퍼와 같이 쓰기

Mybatis를 이용해서 SQL처리시 어노테이션을 이용하는 방식이 편리하지만
SQL이 길어지면 Xml을 이용하는 방식을 선호하게 된다.

xml파일은 Mapper 인터페이스가 있는 곳에 같이 작성하거나
src/main/resources 구조에 xml을 저장할 폴더를 생성할 수 있다.
xml 파일을 만들 때 이름에 대한 규칙은 없지만
가능하다면 Mapper인터페이스와 같은 이름을 이용하는 것이 가독성에 좋음


TimeMapper 인터페이스

package org.zerock.mapper;

import org.apache.ibatis.annotations.Select;

public interface TimeMapper {
	
	@Select("select sysdate from dual")
	public String getTime();
	
	public String getTime2(); //xml을 이용해서 처리할것

}


TimeMapper.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Mapper 3.0/EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.zerock.mapper.TimeMapper">

	<select id="getTime2" resultType="string">
		select sysdate from dual
	</select>

</mapper>


xml 매퍼를 이용할 때 신경써야할 부분은 <mapper>태그의 namespace 속성값 이다.

Mybatis는 Mapper 인터페이스와 xml을 인터페이스의 이름과 snamesapce속성값을 가지고 판단한다.


TimeMapper 인터페이스의 메소드 이름(getTime2())과 xml의 id값을 동일하게 맞춰야 한다.



log4jdbc-log4j2 설정

- sql 로그를 확인하기 위한 설정

pom.xml

	<dependency>
			<groupId>org.bgee.log4jdbc-log4j2</groupId>
			<artifactId>log4jdbc-log4j2-jdbc4</artifactId>
			<version>1.16</version>
		</dependency>
		




log4jdbc.log4j2.properties


srs/main/resources 밑에 log4jdbc.log4j2.properties 파일 추가

log4jdbc.spylogdelegator.name=net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator



root_context.xml

<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<!-- <property name="driverClassName" value="oracle.jdbc.OracleDriver"/> -->
	<!-- <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/> 
		<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:XE"/> -->
		
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"/>
		<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:XE"/>
		<property name="username" value="spring"/>
		<property name="password" value="oracle"/>
	</bean>
	
	
기존 driverClassName, jdbcUrl 프로퍼티의 value값을 수정


로그레벨 설정

srs/test/resources/log4j.xml


	<logger name="jdbc.audit">
		<level value="warn"/>
	</logger>
	
	<logger name="jdbc.resultset">
		<level value="warn"/>
	</logger>
	
	<logger name="jdbc.connection">
		<level value="warn"/>
	</logger>



위 설정 추가하면 로그 내용이 짧아짐
기본 설정의 로그는 info 레벨이기 때문에 warn과 같이 좀 더 높은 레벨의 로그만 기록하게 수정하면
테스트 코드 실행시 로그의 양이 줄어든다.
